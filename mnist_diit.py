# -*- coding: utf-8 -*-
"""mnist_diit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11URKEYpbeDHvKP_77XnX2CvxasIpGyQX
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np

(x_train,y_train),(x_test,y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train/255.0
x_test = x_test/255.0

digit = x_train[0]
d_img = digit.reshape(28,28)
plt.imshow(d_img,cmap='gray',interpolation="nearest")
plt.show()

model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(28,28)),
    tf.keras.layers.Dense(128,activation = 'relu'),
    tf.keras.layers.Dense(64,activation='relu'),
    tf.keras.layers.Dense(32,activation='relu'),
    tf.keras.layers.Dense(10,activation='softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=50,validation_split=0.1)

total_loss,test_acc = model.evaluate(x_test,y_test)
print("accuracy",test_acc)

# x_test_flattened = x_test.reshape(len(x_test),28*28)
probs = model.predict(x_test)
preds = np.argmax(probs,axis=1)
print(preds[5])
plt.imshow(x_test[5],cmap='gray')
plt.show()

