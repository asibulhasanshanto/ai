# -*- coding: utf-8 -*-
"""aug.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uTKmHRz-GoiA-QtlEvahlRddACz2g-pB
"""



import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# Display digits 0 to 9
fig, axes = plt.subplots(nrows=1, ncols=10, figsize=(10, 1))
for i in range(10):
    idx = y_train == i
    axes[i].imshow(x_train[idx][0], cmap="gray")
    axes[i].set_title(str(i))
    axes[i].axis("off")

x_train = x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1))

# Normalize the pixel values to between 0 and 1
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# normalize the pixel values to be between 0 and 1
x_train_norm = x_train

# plot the first 20 images in the dataset
fig, ax = plt.subplots(4, 5, figsize=(10, 8))
for i, image in enumerate(x_train_norm[:20]):
    row = i // 5
    col = i % 5
    ax[row, col].imshow(image, cmap='gray')
    ax[row, col].axis('off')
plt.show()

# Display some original, rotated, and sheared images
fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(8, 8))
for i in range(3):
    axes[i][0].imshow(x_train[i], cmap="gray")
    axes[i][0].set_title('Original')
    axes[i][0].axis("off")

    rotated_datagen = ImageDataGenerator(rotation_range=30)
    rotated_images = rotated_datagen.flow(x_train[i:i+1], batch_size=1).next()
    axes[i][1].imshow(rotated_images[0], cmap="gray")
    axes[i][1].set_title('Rotated')
    axes[i][1].axis("off")

    zoomed_datagen = ImageDataGenerator(zoom_range=[0.8, 1.5])
    zoomed_images = zoomed_datagen.flow(x_train[i:i+1], batch_size=1).next()
    axes[i][2].imshow(zoomed_images[0], cmap="gray")
    axes[i][2].set_title('Zoomed')
    axes[i][2].axis("off")

    sheared_datagen = ImageDataGenerator(shear_range=0.2)
    sheared_images = sheared_datagen.flow(x_train[i:i+1], batch_size=1).next()
    axes[i][3].imshow(sheared_images[0], cmap="gray")
    axes[i][3].set_title('Sheared')
    axes[i][3].axis("off")

plt.tight_layout()
plt.show()

datagen = ImageDataGenerator(
    rotation_range=10,
    shear_range=0.2,
    horizontal_flip = True,
    zoom_range = 0.1)

datagen.fit(x_train.reshape(-1, 28, 28, 1))

len(x_train)

#  get the first 20 augmented images from the generator
augmented_images = np.array([datagen.flow(x_train.reshape(-1, 28, 28, 1)).next()[0].squeeze() for i in range(20)])

# plot the images
fig, ax = plt.subplots(4, 5, figsize=(10, 8))
for i, image in enumerate(augmented_images):
    row = i // 5
    col = i % 5
    ax[row, col].imshow(image, cmap='gray')
    ax[row, col].axis('off')
plt.show()

# Define the model architecture
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(32, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

#Compile the model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train,y_train,epochs=10,validation_split=0.1)

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test accuracy:', test_acc)

# Define a function to display a given digit
def display_digit(digit):
    plt.imshow(digit, cmap='gray')
    plt.show()

# Define a function to display the count of each digit in a given dataset
def display_digit_count(data, label):
    digit_counts = np.zeros(10, dtype=int)
    for i in range(len(data)):
        digit_counts[label[i]] += 1
    for digit in range(10):
        print("Digit {}: {} examples".format(digit, digit_counts[digit]))

user_input = input("Enter a digit (0-9) or 'exit': ")
try:
    digit = int(user_input)
    if digit < 0 or digit > 9:
        print("Invalid input. Please enter a digit between 0 and 9.")
    else:
        display_digit(x_test[y_test == digit][0])
except ValueError:
    print("Invalid input. Please enter a digit between 0 and 9 or 'exit'.")